{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","protobuf.min.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","require","module","exports","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","Number","floor","JSON","stringify","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","asPromise","fs","inquire","filename","options","callback","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","converter","Enum","util","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","values","repeated","typeDefault","GetEnumValueName","name","fullName","isUnsigned","type","genValuePartial_toObject","IsDigit","enum_name","enum_value_name","result","input","previous","current","IsLetterOrDigit","toUpperCase","toLowerCase","ShoutyToPascalCase","prefix_to_match","prefix_index","value_index","substr","TryRemovePrefix","char","fromObject","mtype","fields","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","valuesById","long","low","high","unsigned","bytes","arrayDefault","hasKs2","_fieldsArray","indexOf","filter","group","ref","id","types","defaults","keyType","basic","packed","rfield","required","missing","wireType","mapKey","genTypePartial","optional","ReflectionObject","create","constructor","className","Namespace","comment","comments","TypeError","reserved","fromJSON","json","enm","toJSON","toJSONOptions","keepComments","Boolean","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","Type","ruleRe","rule","extend","isObject","message","defaultValue","extensionField","declaringField","_packed","defineProperty","get","getOption","setOption","ifNotSet","resolved","parent","lookupTypeOrEnum","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","build","load","root","Root","loadSync","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","configure","Writer","BufferWriter","Reader","BufferReader","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","parsedOptions","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","names","methods","getEnum","prev","setOptions","onAdd","onRemove","define","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","setParsedOption","propName","opt","find","hasOwnProperty","newValue","setProperty","newOpt","Root_","fieldNames","oneof","addFieldsToParent","oneofName","oneOfGetter","set","oneOfSetter","LongBits","indexOutOfRange","writeLength","RangeError","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","int64","toBigInt","uint64","sint64","zzDecode","fixed64","sfixed64","float","double","skip","skipType","BufferReader_","utf8Slice","min","parse","common","deferred","files","imports","SYNC","resolvePath","self","sync","finish","cb","getBundledFileName","idx","lastIndexOf","altname","substring","process","parsed","weakImports","concat","queued","weak","setTimeout","readFileSync","isNode","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","methodName","lcFirst","isReserved","m","q","s","oneofs","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","merge","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","target","bake","o","key","safePropBackslashRe","safePropQuoteRe","ucFirst","str","camelCaseRe","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","dst","setProp","prevValue","zero","zzEncode","TWO_32","fromBigInt","BigInt","negative","fromNumber","from","mask","part0","part1","part2","src","newError","CustomError","captureStackTrace","stack","pool","global","versions","node","window","freeze","isFinite","isset","isSet","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","key2Re","key32Re","key64Re","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","seenFirstField","invalid","genVerifyKey","genVerifyValue","oneofProp","expected","type_url","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength","$require","$module","amd","Long","isLong"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n",null,"\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(14),\n    util = require(33);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(d%s){\", prop);\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\n                (\"default:\");\n                gen\n                (\"case%j:\", GetEnumValueName(field.resolvedType.name,keys[i]))\n                (\"case %i:\", values[keys[i]])\n                    (\"m%s=%j\", prop, values[keys[i]])\n                    (\"break\");\n            } gen\n            (\"}\");\n        } else gen\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\": gen\n                (\"m%s=d%s>>>0\", prop, prop);\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\": gen\n                (\"m%s=d%s|0\", prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(typeof d%s===\\\"string\\\"||typeof d%s===\\\"number\\\"||typeof d%s===\\\"bigint\\\")\", prop, prop, prop)\n                    (\"m%s=BigInt(d%s)\", prop, prop)\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toBigInt(%s)\", prop, prop, prop, isUnsigned);\n                break;\n            case \"bytes\": gen\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n                (\"else if(d%s.length >= 0)\", prop)\n                    (\"m%s=d%s\", prop, prop);\n                break;\n            case \"string\": gen\n                (\"m%s=String(d%s)\", prop, prop);\n                break;\n            case \"bool\": gen\n                (\"m%s=Boolean(d%s)\", prop, prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray;\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    (\"if(d instanceof this.ctor)\")\n        (\"return d\");\n    if (!fields.length) return gen\n    (\"return new this.ctor\");\n    gen\n    (\"var m=new this.ctor\");\n    for (var i = 0; i < fields.length; ++i) {\n        var field  = fields[i].resolve(),\n            prop   = util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) { gen\n    (\"if(d%s){\", prop)\n        (\"m%s={}\", prop)\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n        (\"}\")\n    (\"}\");\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(d%s){\", prop)\n        (\"if(!Array.isArray(d%s))\", prop)\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n        (\"m%s=[]\", prop)\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n        (\"}\")\n    (\"}\");\n\n        // Non-repeated fields\n        } else {\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n            if (!(field.resolvedType instanceof Enum)) gen\n    (\"}\");\n        }\n    }\n\n    var result = gen(\"return m\");\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) gen\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n        else gen\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\": gen\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n                // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"d%s=o.longs===String ? util.LongBits.from(m%s).toBigInt(%s).toString(): o.longs===BigInt ? util.LongBits.from(m%s).toBigInt(%s) : m%s\", prop, prop, isUnsigned, prop, isUnsigned ? \"true\": \"\", prop);\n                break;\n            case \"bytes\": gen\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n                break;\n            default: gen\n            (\"d%s=m%s\", prop, prop);\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    if (!fields.length)\n        return util.codegen()(\"return {}\");\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    (\"if(!o)\")\n        (\"o={}\")\n    (\"var d={}\");\n\n    var repeatedFields = [],\n        mapFields = [],\n        normalFields = [],\n        i = 0;\n    for (; i < fields.length; ++i)\n        if (!fields[i].partOf)\n            ( fields[i].resolve().repeated ? repeatedFields\n            : fields[i].map ? mapFields\n            : normalFields).push(fields[i]);\n\n    if (repeatedFields.length) { gen\n    (\"if(o.arrays||o.defaults){\");\n        for (i = 0; i < repeatedFields.length; ++i) gen\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (mapFields.length) { gen\n    (\"if(o.objects||o.defaults){\");\n        for (i = 0; i < mapFields.length; ++i) gen\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\n        gen\n    (\"}\");\n    }\n\n    if (normalFields.length) { gen\n    (\"if(o.defaults){\");\n        for (i = 0; i < normalFields.length; ++i) {\n            var field = normalFields[i],\n                prop  = util.safeProp(field.name);\n            if (field.resolvedType instanceof Enum) gen\n        (\"d%s=o.enums===String?%j:%j\", prop, GetEnumValueName(field.resolvedType.name, field.resolvedType.valuesById[field.typeDefault]), field.typeDefault);\n            else if (field.long) gen\n            (\"var n=new util.LongBits(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n            (\"d%s=o.longs===String?n.toBigInt().toString():o.longs===BigInt?n.toBigInt().toString():n\", prop);\n            else if (field.bytes) {\n                var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n                gen\n        (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n        (\"else{\")\n            (\"d%s=%s\", prop, arrayDefault)\n            (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n        (\"}\");\n            } else gen\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n        } gen\n    (\"}\");\n    }\n    var hasKs2 = false;\n    for (i = 0; i < fields.length; ++i) {\n        var field = fields[i],\n            index = mtype._fieldsArray.indexOf(field),\n            prop  = util.safeProp(field.name);\n        if (field.map) {\n            if (!hasKs2) { hasKs2 = true; gen\n    (\"var ks2\");\n            } gen\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n        (\"d%s={}\", prop)\n        (\"for(var j=0;j<ks2.length;++j){\");\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n        (\"}\");\n        } else if (field.repeated) { gen\n    (\"if(m%s&&m%s.length){\", prop, prop)\n        (\"d%s=[]\", prop)\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n        (\"}\");\n        } else { gen\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n        if (field.partOf) gen\n        (\"if(o.oneofs)\")\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n        }\n        gen\n    (\"}\");\n    }\n    const result = gen\n        (\"return d\");\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n\n\nfunction IsDigit(value)\n{\n    return /^[0-9]$/.test(value)\n}\n\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {String} enum_name Message type\n * @param {String} enum_value_name \n * @returns {String} RealName instance\n */\nfunction GetEnumValueName(enum_name, enum_value_name)\n{\n    let stripped = TryRemovePrefix(enum_name, enum_value_name);\n    let result = ShoutyToPascalCase(stripped);\n    // Just in case we have an enum name of FOO and a value of FOO_2... make sure the returned\n    // string is a valid identifier.\n    \n    if (IsDigit(result.charAt(0)))\n    {\n        result = \"_\" + result;\n    }\n    return result;\n}\n\nexports.GetEnumValueName = GetEnumValueName;\n\n// Attempt to remove a prefix from a value, ignoring casing and skipping underscores.\n// (foo, foo_bar) => bar - underscore after prefix is skipped\n// (FOO, foo_bar) => bar - casing is ignored\n// (foo_bar, foobarbaz) => baz - underscore in prefix is ignored\n// (foobar, foo_barbaz) => baz - underscore in value is ignored\n// (foo, bar) => bar - prefix isn't matched; return original value\n\nfunction TryRemovePrefix(prefix, value)\n{\n    var prefix_to_match = '';\n    // First normalize to a lower-case no-underscores prefix to match against\n    for (let i = 0; i < prefix.length; i++)\n    {\n        let c = prefix.charAt(i)\n        if (c != '_')\n        {\n            prefix_to_match += c.toLowerCase();\n        }\n    }\n\n    // This keeps track of how much of value we've consumed\n    let prefix_index, value_index;\n    for (prefix_index = 0, value_index = 0;\n        prefix_index < prefix_to_match.length && value_index < value.length;\n        value_index++)\n    {\n        // Skip over underscores in the value\n        let c = value.charAt(value_index)\n        if (c == '_')\n        {\n            continue;\n        }\n        if (c != null && c.toLowerCase() != prefix_to_match.charAt(prefix_index++))\n        {\n            // Failed to match the prefix - bail out early.\n            return value;\n        }\n    }\n\n    // If we didn't finish looking through the prefix, we can't strip it.\n    if (prefix_index < prefix_to_match.length)\n    {\n        return value;\n    }\n\n    // Step over any underscores after the prefix\n    while (value_index < value.length && value.charAt(value_index) == '_')\n    {\n        value_index++;\n    }\n\n    // If there's nothing left (e.g. it was a prefix with only underscores afterwards), don't strip.\n    if (value_index == value.length)\n    {\n        return value;\n    }\n\n    let c = value.substr(value_index);\n    return c;\n}\n\n\nfunction IsLetterOrDigit(char)\n{\n    return /^[a-zA-Z0-9]$/.test(char);\n}\n\n// Convert a string which is expected to be SHOUTY_CASE (but may not be *precisely* shouty)\n// into a PascalCase string. Precise rules implemented:\n\n// Previous input character      Current character         Case\n// Any                           Non-alphanumeric          Skipped\n// None - first char of input    Alphanumeric              Upper\n// Non-letter (e.g. _ or 1)      Alphanumeric              Upper\n// Numeric                       Alphanumeric              Upper\n// Lower letter                  Alphanumeric              Same as current\n// Upper letter                  Alphanumeric              Lower\nfunction ShoutyToPascalCase(input)\n{\n    var result = \"\"\n    // Simple way of implementing \"always start with upper\"\n    var previous = '_';\n    for (let i = 0; i < input.length; i++)\n    {\n        let current = input.charAt(i);\n        if (!IsLetterOrDigit(current))\n        {\n            previous = current;\n            continue;\n        }\n        if (!IsLetterOrDigit(previous))\n        {\n            result += current.toUpperCase();\n        }\n        else if (IsDigit(previous))\n        {\n            result += current.toUpperCase();\n        }\n        else if (/^[a-z]$/.test(previous))\n        {\n            result += (current);\n        }\n        else\n        {\n            result += (current.toLowerCase());\n        }\n        previous = current;\n    }\n    return result;\n}","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum    = require(14),\n    types   = require(32),\n    util    = require(33);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    (\"if(!(r instanceof Reader))\")\n        (\"r=Reader.create(r)\")\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k,value\" : \"\"))\n    (\"while(r.pos<c){\")\n        (\"var t=r.uint32()\");\n    if (mtype.group) gen\n        (\"if((t&7)===4)\")\n            (\"break\");\n    gen\n        (\"switch(t>>>3){\");\n\n    var i = 0;\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            ref   = \"m\" + util.safeProp(field.name); gen\n            (\"case %i:\", field.id);\n\n        // Map fields\n        if (field.map) { gen\n                (\"var c2 = r.uint32()+r.pos\");\n\n            if (types.defaults[field.keyType] !== undefined) gen\n                (\"k=%j\", types.defaults[field.keyType]);\n            else gen\n                (\"k=null\");\n\n            if (types.defaults[type] !== undefined) gen\n                (\"value=%j\", types.defaults[type]);\n            else gen\n                (\"value=null\");\n\n            gen\n                (\"while(r.pos<c2){\")\n                    (\"var tag2=r.uint32()\")\n                    (\"switch(tag2>>>3){\")\n                        (\"case 1: k=r.%s(); break\", field.keyType)\n                        (\"case 2:\");\n\n            if (types.basic[type] === undefined) gen\n                            (\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n            else gen\n                            (\"value=r.%s()\", type);\n\n            gen\n                            (\"break\")\n                        (\"default:\")\n                            (\"r.skipType(tag2&7)\")\n                            (\"break\")\n                    (\"}\")\n                (\"}\");\n            gen\n                (\"if(! %s )\", ref)\n                    (\"%s={}\", ref);\n            gen\n                (\"%s[String(k)] = value\", ref);\n\n        // Repeated fields\n        } else if (field.repeated) { gen\n\n                (\"if(!(%s&&%s.length))\", ref, ref)\n                    (\"%s=[]\", ref);\n\n            // Packable (always check for forward and backward compatiblity)\n            if (types.packed[type] !== undefined) gen\n                (\"if((t&7)===2){\")\n                    (\"var c2=r.uint32()+r.pos\")\n                    (\"while(r.pos<c2)\")\n                        (\"%s.push(r.%s())\", ref, type)\n                (\"}else\");\n\n            // Non-packed\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\n                    ? \"%s.push(types[%i].decode(r))\"\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n            else gen\n                    (\"%s.push(r.%s())\", ref, type);\n\n        // Non-repeated\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n                ? \"%s=types[%i].decode(r)\"\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n        else gen\n                (\"%s=r.%s()\", ref, type);\n        gen\n                (\"break\");\n    // Unknown fields\n    } gen\n            (\"default:\")\n                (\"r.skipType(t&7)\")\n                (\"break\")\n\n        (\"}\")\n    (\"}\");\n\n    // Field presence\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\n        var rfield = mtype._fieldsArray[i];\n        if (rfield.required) gen\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    }\n\n    const result = gen\n        (\"return m\");\n\n    return result;\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum     = require(14),\n    types    = require(32),\n    util     = require(33);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n    return field.resolvedType.group\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    (\"if(!w)\")\n        (\"w=Writer.create()\");\n\n    var i, ref;\n\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n\n    for (var i = 0; i < fields.length; ++i) {\n        var field    = fields[i].resolve(),\n            index    = mtype._fieldsArray.indexOf(field),\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n            wireType = types.basic[type];\n            ref      = \"m\" + util.safeProp(field.name);\n\n        // Map fields\n        if (field.map) {\n            gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n            if (wireType === undefined) gen\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n            else gen\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n            gen\n        (\"}\")\n    (\"}\");\n\n            // Repeated fields\n        } else if (field.repeated) { gen\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n            // Packed repeated\n            if (field.packed && types.packed[type] !== undefined) { gen\n\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n        (\"for(var i=0;i<%s.length;++i)\", ref)\n            (\"w.%s(%s[i])\", type, ref)\n        (\"w.ldelim()\");\n\n            // Non-packed\n            } else { gen\n\n        (\"for(var i=0;i<%s.length;++i)\", ref);\n                if (wireType === undefined)\n            genTypePartial(gen, field, index, ref + \"[i]\");\n                else gen\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n            } gen\n    (\"}\");\n\n        // Non-repeated\n        } else {\n            if (field.optional) gen\n    (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n            if (wireType === undefined)\n        genTypePartial(gen, field, index, ref);\n            else gen\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n\n        }\n    }\n\n    const result = gen\n        (\"return w\");\n\n    return result;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(21),\n    util = require(33);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(14),\n    types = require(32),\n    util  = require(33);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    if (rule === \"proto3_optional\") {\n        rule = \"optional\";\n    }\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = types.long[type] !== undefined;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | bigint | bigint[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(17);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(13);\nprotobuf.decoder          = require(12);\nprotobuf.verifier         = require(36);\nprotobuf.converter        = require(11);\n\n// Reflection\nprotobuf.ReflectionObject = require(22);\nprotobuf.Namespace        = require(21);\nprotobuf.Root             = require(26);\nprotobuf.Enum             = require(14);\nprotobuf.Type             = require(31);\nprotobuf.Field            = require(15);\nprotobuf.OneOf            = require(23);\nprotobuf.MapField         = require(18);\nprotobuf.Service          = require(30);\nprotobuf.Method           = require(20);\n\n// Runtime\nprotobuf.Message          = require(19);\nprotobuf.wrappers         = require(37);\n\n// Utility\nprotobuf.types            = require(32);\nprotobuf.util             = require(33);\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(38);\nprotobuf.BufferWriter = require(39);\nprotobuf.Reader       = require(24);\nprotobuf.BufferReader = require(25);\n\n// Utility\nprotobuf.util         = require(35);\nprotobuf.rpc          = require(28);\nprotobuf.roots        = require(27);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(15);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(32),\n    util    = require(33);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | bigint | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(35);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(33);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Options properly parsed into an object\n     */\n    this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined,\n        \"parsedOptions\"  , this.parsedOptions,\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(15),\n    util     = require(33);\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                if (prev.filename)\n                    object.filename = prev.filename;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @param {string} [filename] Name of the file defining the namespace\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json, filename) {\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n            if (!ptr.filename)\n                ptr.filename = filename;\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(33);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Parsed Options.\n     * @type {Array.<Object.<string,*>>|undefined}\n     */\n    this.parsedOptions = null;\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n    if (!this.parsedOptions) {\n        this.parsedOptions = [];\n    }\n    var parsedOptions = this.parsedOptions;\n    if (propName) {\n        // If setting a sub property of an option then try to merge it\n        // with an existing option\n        var opt = parsedOptions.find(function (opt) {\n            return Object.prototype.hasOwnProperty.call(opt, name);\n        });\n        if (opt) {\n            // If we found an existing option - just merge the property value\n            var newValue = opt[name];\n            util.setProperty(newValue, propName, value);\n        } else {\n            // otherwise, create a new option, set it's property and add it to the list\n            opt = {};\n            opt[name] = util.setProperty({}, propName, value);\n            parsedOptions.push(opt);\n        }\n    } else {\n        // Always create a new option when setting the value of the option itself\n        var newOpt = {};\n        newOpt[name] = value;\n        parsedOptions.push(newOpt);\n    }\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(15),\n    util  = require(33);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(35);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.int64 = function() {\n    return readLongVarint.call(this).toBigInt();\n};\n\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.uint64 = function() {\n    return readLongVarint.call(this).toBigInt();\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.sint64 = function() {\n    return readLongVarint.call(this).zzDecode().toBigInt();\n};\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.fixed64 = function() {\n    return readFixed64.call(this).toBigInt();\n};\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {bigint} Value read\n */\nReader.prototype.sfixed64 = function() {\n    return readFixed64.call(this).toBigInt();\n};\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(24);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(35);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(21);\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(15),\n    Enum    = require(14),\n    OneOf   = require(23),\n    util    = require(33);\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n\n    /**\n     * Paths of imported files\n     * @type {string[]|null}\n     */\n     this.imports = null;\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname;\n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (self.imports === null) {\n                    if (parsed.imports)\n                        self.imports = [...parsed.imports];\n                    else\n                        self.imports = []\n                    if (parsed.weakImports)\n                        self.imports = self.imports.concat(parsed.weakImports);\n                }\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            self.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(29);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(35);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(21);\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(20),\n    util   = require(33),\n    rpc    = require(28);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n            m: method,\n            q: method.resolvedRequestType.ctor,\n            s: method.resolvedResponseType.ctor\n        });\n    }\n    return rpcService;\n};\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(21);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(14),\n    OneOf     = require(23),\n    Field     = require(15),\n    MapField  = require(18),\n    Service   = require(30),\n    Message   = require(19),\n    Reader    = require(24),\n    Writer    = require(38),\n    util      = require(33),\n    encoder   = require(13),\n    decoder   = require(12),\n    verifier  = require(36),\n    converter = require(11),\n    wrappers  = require(37);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    var gen = util.codegen([\"p\"], mtype.name);\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n        if ((field = mtype._fieldsArray[i]).map) gen\n            (\"this%s={}\", util.safeProp(field.name));\n        else if (field.repeated) gen\n            (\"this%s=[]\", util.safeProp(field.name));\n    return gen\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n        (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `BigInt` (the global types).\n * Defaults to copy the present value.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(33);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(35);\n\nvar roots = require(27);\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(3);\nutil.fetch   = require(5);\nutil.path    = require(8);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(31);\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(14);\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n    function setProp(dst, path, value) {\n        var part = path.shift();\n        if (path.length > 0) {\n            dst[part] = setProp(dst[part] || {}, path, value);\n        } else {\n            var prevValue = dst[part];\n            if (prevValue)\n                value = [].concat(prevValue).concat(value);\n            dst[part] = value;\n        }\n        return dst;\n    }\n\n    if (typeof dst !== \"object\")\n        throw TypeError(\"dst must be an object\");\n    if (!path)\n        throw TypeError(\"path must be specified\");\n\n    path = path.split(\".\");\n    return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\n    }\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(35);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo | 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi | 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toBigInt = function() { return 0n; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\nconst TWO_32 = 4294967296n;\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromBigInt = function fromNumber(value) {\n    value = BigInt(value);\n    if (value === 0n)\n        return zero;\n\n    var negative = value < 0;\n    if (negative) {\n        value = -value;\n    }\n    var hi = Number(value >> 32n) | 0;\n    var lo = Number(value - ( BigInt(hi) << 32n ) ) | 0;\n\n    if (negative) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > TWO_32) {\n            lo = 0;\n            if (++hi > TWO_32)\n                hi = 0;\n        }\n    }\n\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\n LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {bigint|number|string|object} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\") {\n        return LongBits.fromNumber(value);\n    }\n    if (typeof value === \"bigint\") {\n        return LongBits.fromBigInt(value);\n    }\n    if (util.isString(value)) {\n        return LongBits.fromBigInt(BigInt(value));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toBigInt = function toBigInt(unsigned) {\n\n\n    if (unsigned) {\n        const result = BigInt(this.lo >>> 0) + ( BigInt(this.hi >>> 0) << 32n );\n        return result;\n    }\n\n    if (this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(BigInt(lo) + ( BigInt(hi) << 32n ) );\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(4);\n\n// float handling accross browsers\nutil.float = require(6);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(7);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(10);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(9);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(34);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = function isInteger(value) {\n    if (typeof value === \"bigint\") return true;\n    return typeof value === \"number\" && (Number.isInteger(value) || isFinite(value) && Math.floor(value) === value);\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(14),\n    util      = require(33);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) { gen\n            (\"switch(%s){\", ref)\n                (\"default:\")\n                    (\"return%j\", invalid(field, \"enum value\"));\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\n            gen\n                    (\"break\")\n            (\"}\");\n        } else {\n            gen\n            (\"{\")\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n                (\"if(e)\")\n                    (\"return%j+e\", field.name + \".\")\n            (\"}\");\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\": gen\n                (\"if(!util.isInteger(%s))\", ref)\n                    (\"return%j\", invalid(field, \"integer\"));\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\": gen\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n                    (\"return%j\", invalid(field, \"integer|bigint\"));\n                break;\n            case \"float\":\n            case \"double\": gen\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\n                    (\"return%j\", invalid(field, \"number\"));\n                break;\n            case \"bool\": gen\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n                    (\"return%j\", invalid(field, \"boolean\"));\n                break;\n            case \"string\": gen\n                (\"if(!util.isString(%s))\", ref)\n                    (\"return%j\", invalid(field, \"string\"));\n                break;\n            case \"bytes\": gen\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n                    (\"return%j\", invalid(field, \"buffer\"));\n                break;\n        }\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\": gen\n            (\"if(!util.key32Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"integer key\"));\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\": gen\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n                (\"return%j\", invalid(field, \"integer|bigint key\"));\n            break;\n        case \"bool\": gen\n            (\"if(!util.key2Re.test(%s))\", ref)\n                (\"return%j\", invalid(field, \"boolean key\"));\n            break;\n    }\n    return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\n        (\"return%j\", \"object expected\");\n    var oneofs = mtype.oneofsArray,\n        seenFirstField = {};\n    if (oneofs.length) gen\n    (\"var p={}\");\n\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n        var field = mtype._fieldsArray[i].resolve(),\n            ref   = \"m\" + util.safeProp(field.name);\n\n        if (field.optional) gen\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n        // map fields\n        if (field.map) { gen\n            (\"if(!util.isObject(%s))\", ref)\n                (\"return%j\", invalid(field, \"object\"))\n            (\"var k=Object.keys(%s)\", ref)\n            (\"for(var i=0;i<k.length;++i){\");\n                genVerifyKey(gen, field, \"k[i]\");\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n            (\"}\");\n\n        // repeated fields\n        } else if (field.repeated) { gen\n            (\"if(!Array.isArray(%s))\", ref)\n                (\"return%j\", invalid(field, \"array\"))\n            (\"for(var i=0;i<%s.length;++i){\", ref);\n                genVerifyValue(gen, field, i, ref + \"[i]\")\n            (\"}\");\n\n        // required or present fields\n        } else {\n            if (field.partOf) {\n                var oneofProp = util.safeProp(field.partOf.name);\n                if (seenFirstField[field.partOf.name] === 1) gen\n            (\"if(p%s===1)\", oneofProp)\n                (\"return%j\", field.partOf.name + \": multiple values\");\n                seenFirstField[field.partOf.name] = 1;\n                gen\n            (\"p%s=1\", oneofProp);\n            }\n            genVerifyValue(gen, field, i, ref);\n        }\n        if (field.optional) gen\n        (\"}\");\n    }\n    return gen\n    (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(19);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n             // Only use fully qualified type name after the last '/'\n            var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                if (type_url.indexOf(\"/\") === -1) {\n                    type_url = \"/\" + type_url;\n                }\n                return this.create({\n                    type_url: type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // Default prefix\n        var googleApi = \"type.googleapis.com/\";\n        var prefix = \"\";\n        var name = \"\";\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            // Separate the prefix used\n            prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            var messageName = message.$type.fullName[0] === \".\" ?\n                message.$type.fullName.substr(1) : message.$type.fullName;\n            // Default to type.googleapis.com prefix if no prefix is used\n            if (prefix === \"\") {\n                prefix = googleApi;\n            }\n            name = prefix + messageName;\n            object[\"@type\"] = name;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(35);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.from(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {bigint|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(38);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(35);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}